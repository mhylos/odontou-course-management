// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init
// prettier-ignore
generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["omitApi"]
}

datasource db {
  // provider = "postgresql"
  // url      = env("POSTGRES_PRISMA_URL")
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Course {
  id                  Int      @id @default(autoincrement())
  enroll_value        Int
  direct_hours        Float
  indirect_hours      Float
  inperson_hours      Float
  online_hours        Float
  name                String
  objective           String   @db.Text
  additional_comments String?  @db.Text
  date_from           DateTime
  date_to             DateTime

  department_fk      Int
  program_fk         Int
  course_director_fk Int
  coordinator_fk     Int

  program         Program    @relation(fields: [program_fk], references: [id])
  department      Department @relation(fields: [department_fk], references: [id])
  course_director User       @relation(fields: [course_director_fk], references: [rut], name: "course_director")
  coordinator     User       @relation(fields: [coordinator_fk], references: [rut], name: "coordinator")

  expenses Expenses[]
  enrolled Enrolled[]
  manages  Manages[]
}

enum Genres {
  femenino
  masculino
}

model Student {
  rut   Int     @id
  genre Genres?
  name  String
  email String

  enrolled Enrolled[]
}

model PaymentTypes {
  id   Int    @id @default(autoincrement())
  name String

  enrolled Enrolled[]
}

model Enrolled {
  student_fk      Int
  course_fk       Int
  payment_type_fk Int?
  status          Boolean   @default(false)
  discount        Int       @default(0)
  ticket_num      Int?
  payment_date    DateTime?
  total           Int
  observation     String

  student Student       @relation(fields: [student_fk], references: [rut], onDelete: Cascade)
  course  Course        @relation(fields: [course_fk], references: [id], onDelete: Cascade)
  payment PaymentTypes? @relation(fields: [payment_type_fk], references: [id])

  @@id([student_fk, course_fk])
}

model Expenses {
  course_fk  Int
  name       String
  unit_value Int
  quantity   Int

  course Course @relation(fields: [course_fk], references: [id])

  @@id(name: "expenses_id", [name, course_fk])
}

model Program {
  id      Int      @id @default(autoincrement())
  name    String
  courses Course[]
}

model Department {
  id          Int    @id @default(autoincrement())
  name        String
  director_fk Int?

  director User? @relation(fields: [director_fk], references: [rut])

  courses  Course[]
  academic Academic[]
}

model hierarchyTypes {
  id   Int    @id @default(autoincrement())
  name String

  manages Manages[]
}

model Manages {
  academic_fk       Int
  course_fk         Int
  hierarchy_type_fk Int
  dedicated_hours   Int
  contract_hours    Int
  percentage        Int
  paid              Int

  academic       Academic       @relation(fields: [academic_fk], references: [user_fk])
  course         Course         @relation(fields: [course_fk], references: [id])
  hierarchy_type hierarchyTypes @relation(fields: [hierarchy_type_fk], references: [id])

  @@id([academic_fk, course_fk])
}

model Academic {
  user_fk       Int     @id
  department_fk Int
  isFOUCH       Boolean

  department Department @relation(fields: [department_fk], references: [id])
  user       User       @relation(fields: [user_fk], references: [rut])

  manages Manages[]
}

model Administrator {
  user_fk Int @id

  user User @relation(fields: [user_fk], references: [rut], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  rut           Int       @unique
  password      String
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?

  academic        Academic?
  administrator   Administrator?
  director        Department[]
  course_director Course[]       @relation(name: "course_director")
  coordinator     Course[]       @relation(name: "coordinator")
  logger          Logger[]

  //authjs 
  accounts Account[]
  sessions Session[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Logger {
  id          Int      @id @default(autoincrement())
  user_fk     String
  action      String
  description String
  timestamp   DateTime

  user User @relation(fields: [user_fk], references: [id])
}

// AUTH.JS
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}
